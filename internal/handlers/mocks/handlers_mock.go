// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handlers_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	handlers "OnlineShopBackend/internal/handlers"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIItemHandlers is a mock of IItemHandlers interface.
type MockIItemHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockIItemHandlersMockRecorder
}

// MockIItemHandlersMockRecorder is the mock recorder for MockIItemHandlers.
type MockIItemHandlersMockRecorder struct {
	mock *MockIItemHandlers
}

// NewMockIItemHandlers creates a new mock instance.
func NewMockIItemHandlers(ctrl *gomock.Controller) *MockIItemHandlers {
	mock := &MockIItemHandlers{ctrl: ctrl}
	mock.recorder = &MockIItemHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemHandlers) EXPECT() *MockIItemHandlersMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockIItemHandlers) CreateItem(ctx context.Context, item handlers.Item) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockIItemHandlersMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockIItemHandlers)(nil).CreateItem), ctx, item)
}

// GetItem mocks base method.
func (m *MockIItemHandlers) GetItem(ctx context.Context, id string) (handlers.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, id)
	ret0, _ := ret[0].(handlers.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockIItemHandlersMockRecorder) GetItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockIItemHandlers)(nil).GetItem), ctx, id)
}

// ItemsList mocks base method.
func (m *MockIItemHandlers) ItemsList(ctx context.Context, offset, limit int) ([]handlers.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsList", ctx, offset, limit)
	ret0, _ := ret[0].([]handlers.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsList indicates an expected call of ItemsList.
func (mr *MockIItemHandlersMockRecorder) ItemsList(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsList", reflect.TypeOf((*MockIItemHandlers)(nil).ItemsList), ctx, offset, limit)
}

// ItemsQuantity mocks base method.
func (m *MockIItemHandlers) ItemsQuantity(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsQuantity", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsQuantity indicates an expected call of ItemsQuantity.
func (mr *MockIItemHandlersMockRecorder) ItemsQuantity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsQuantity", reflect.TypeOf((*MockIItemHandlers)(nil).ItemsQuantity), ctx)
}

// SearchLine mocks base method.
func (m *MockIItemHandlers) SearchLine(ctx context.Context, param string) ([]handlers.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLine", ctx, param)
	ret0, _ := ret[0].([]handlers.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLine indicates an expected call of SearchLine.
func (mr *MockIItemHandlersMockRecorder) SearchLine(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLine", reflect.TypeOf((*MockIItemHandlers)(nil).SearchLine), ctx, param)
}

// UpdateItem mocks base method.
func (m *MockIItemHandlers) UpdateItem(ctx context.Context, item handlers.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockIItemHandlersMockRecorder) UpdateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockIItemHandlers)(nil).UpdateItem), ctx, item)
}

// MockICategoryHandlers is a mock of ICategoryHandlers interface.
type MockICategoryHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryHandlersMockRecorder
}

// MockICategoryHandlersMockRecorder is the mock recorder for MockICategoryHandlers.
type MockICategoryHandlersMockRecorder struct {
	mock *MockICategoryHandlers
}

// NewMockICategoryHandlers creates a new mock instance.
func NewMockICategoryHandlers(ctrl *gomock.Controller) *MockICategoryHandlers {
	mock := &MockICategoryHandlers{ctrl: ctrl}
	mock.recorder = &MockICategoryHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryHandlers) EXPECT() *MockICategoryHandlersMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockICategoryHandlers) CreateCategory(ctx context.Context, category handlers.Category) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockICategoryHandlersMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockICategoryHandlers)(nil).CreateCategory), ctx, category)
}

// GetCategoryList mocks base method.
func (m *MockICategoryHandlers) GetCategoryList(ctx context.Context) ([]handlers.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryList", ctx)
	ret0, _ := ret[0].([]handlers.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryList indicates an expected call of GetCategoryList.
func (mr *MockICategoryHandlersMockRecorder) GetCategoryList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryList", reflect.TypeOf((*MockICategoryHandlers)(nil).GetCategoryList), ctx)
}
