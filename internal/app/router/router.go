/*
 * Backend for Online Shop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package router

import (
	"OnlineShopBackend/internal/delivery"
	"OnlineShopBackend/internal/delivery/swagger/docs"

	ginzap "github.com/gin-contrib/zap"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.uber.org/zap"
)

type Router struct {
	*gin.Engine
	delivery *delivery.Delivery
	logger   *zap.Logger
}

// NewRouter returns a new router.
func NewRouter(delivery *delivery.Delivery, logger *zap.Logger) *Router {
	logger.Debug("Enter in NewRouter()")
	gin := gin.Default()
	//gin.Use(cors.Default())
	gin.Use(CORSMiddleware())
	//config := cors.DefaultConfig()
	//config.AllowOrigins = []string{"http://localhost:3000"}
	//config.AllowMethods = []string{"GET", "POST", "PUT", "PATCH", "DELETE"}
	//config.AllowHeaders = []string{"Authorization"}
	//gin.Use(cors.New(config))

	//gin.Use(cors.New(cors.Config{
	//	AllowOrigins: []string{"https://accounts.google.com", "https://accounts.google.com/o/oauth2/auth?", "http://localhost:8000", "http://localhost:3000", "http://localhost:8000/user/login/google", "*"}, //,
	//	AllowMethods:     []string{"PUT", "PATCH", "GET", "POST", "OPTIONS", "*"},
	//	AllowHeaders:     []string{"Origin", "Authorization", "Credentials", "*"},
	//	ExposeHeaders:    []string{"Content-Length", "*"},
	//	AllowCredentials: true,
	//}))

	gin.Use(ginzap.RecoveryWithZap(logger, true))
	gin.Static("/files", "./static/files")
	docs.SwaggerInfo.BasePath = "/"
	gin.Group("/docs").Any("/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router := &Router{
		delivery: delivery,
		logger:   logger,
	}
	// Endpoints that do not require authorization

	// Categories
	gin.GET("/categories/:categoryID", delivery.GetCategory)
	gin.GET("/categories/list", delivery.GetCategoryList)

	// Items
	gin.GET("/items/:itemID", delivery.GetItem)
	gin.GET("/items/quantityFav/:userID", delivery.ItemsQuantityInFavourite)
	gin.GET("/items/quantityCat/:categoryName", delivery.ItemsQuantityInCategory)
	gin.GET("/items/quantity", delivery.ItemsQuantity)
	gin.GET("/items/", delivery.GetItemsByCategory) //?param=categoryName&offset=20&limit=10&sort_type=name&sort_order=asc (sort_type == name or price, sort_order == asc or desc)
	gin.GET("/items/list", delivery.ItemsList)      //?offset=20&limit=10&sort_type=name&sort_order=asc (sort_type == name or price, sort_order == asc or desc)
	gin.GET("/items/search/", delivery.SearchLine)  //?param=searchRequest&offset=20&limit=10&sort_type=name&sort_order=asc (sort_type == name or price, sort_order == asc or desc)

	// Cart
	gin.GET("/cart/:cartID", delivery.GetCart)
	gin.GET("/cart/byUser/:userID", delivery.GetCartByUserId)
	gin.POST("/cart/create/:userID", delivery.CreateCart)
	gin.PUT("/cart/addItem", delivery.AddItemToCart)
	gin.DELETE("/cart/delete/:cartID/:itemID", delivery.DeleteItemFromCart)
	gin.DELETE("/cart/delete/:cartID", delivery.DeleteCart)

	// Rights
	gin.GET("/rights/:rightsID", delivery.GetRights)

	// User
	gin.POST("/user/create", delivery.CreateUser)
	gin.POST("/user/login", delivery.LoginUser)
	gin.GET("/user/logout", delivery.LogoutUser)
	gin.GET("/user/login/google", delivery.LoginUserGoogle)
	gin.GET("/user/callbackGoogle", delivery.CallbackGoogle)
	gin.POST("/user/token/update", delivery.TokenUpdate)

	
	// Endpoints that require authentification and authoruzation
	gin.GET("/", delivery.Authentificate, delivery.Authorize, delivery.Index)

	// Images
	gin.GET("/images/list", delivery.Authentificate, delivery.Authorize, delivery.GetFileList)

	// Categories
	gin.POST("/categories/create", delivery.Authentificate, delivery.Authorize, delivery.CreateCategory)
	gin.PUT("/categories/:categoryID", delivery.Authentificate, delivery.Authorize, delivery.UpdateCategory)
	gin.POST("/categories/image/upload/:categoryID", delivery.Authentificate, delivery.Authorize, delivery.UploadCategoryImage)
	gin.DELETE("/categories/image/delete", delivery.Authentificate, delivery.Authorize, delivery.DeleteCategoryImage) //?id=25f32441-587a-452d-af8c-b3876ae29d45&name=20221209194557.jpeg
	gin.DELETE("/categories/delete/:categoryID", delivery.Authentificate, delivery.Authorize, delivery.DeleteCategory)

	// Items
	gin.POST("/items/create", delivery.Authentificate, delivery.Authorize, delivery.CreateItem)
	gin.PUT("/items/update", delivery.Authentificate, delivery.Authorize, delivery.UpdateItem)
	gin.POST("/items/image/upload/:itemID", delivery.Authentificate, delivery.Authorize, delivery.UploadItemImage)
	gin.DELETE("/items/image/delete", delivery.Authentificate, delivery.Authorize, delivery.DeleteItemImage) //?id=25f32441-587a-452d-af8c-b3876ae29d45&name=20221209194557.jpeg
	gin.DELETE("/items/delete/:itemID", delivery.Authentificate, delivery.Authorize, delivery.DeleteItem)
	gin.POST("/items/addFav/:userID/:itemID", delivery.Authentificate, delivery.Authorize, delivery.AddFavouriteItem)
	gin.GET("items/favList", delivery.Authentificate, delivery.Authorize, delivery.GetFavouriteItems)
	gin.DELETE("/items/deleteFav/:userID/:itemID", delivery.Authentificate, delivery.Authorize, delivery.DeleteFavouriteItem)

	// Rights
	gin.POST("/rights/create", delivery.Authentificate, delivery.Authorize, delivery.CreateRights)
	gin.PUT("/rights/update", delivery.Authentificate, delivery.Authorize, delivery.UpdateRights)
	gin.DELETE("/rights/delete/:rightsID", delivery.Authentificate, delivery.Authorize, delivery.DeleteRights)
	gin.GET("/list/rights", delivery.Authentificate, delivery.Authorize, delivery.RightsList)

	// User
	gin.GET("/user/profile", delivery.Authentificate, delivery.Authorize, delivery.UserProfile)
	gin.PUT("/user/profile/edit", delivery.Authentificate, delivery.Authorize, delivery.UserProfileUpdate)
	gin.GET("/user/:userID", delivery.Authentificate, delivery.Authorize, delivery.GetUserById)
	gin.GET("/user/list", delivery.Authentificate, delivery.Authorize, delivery.GetUsersList)
	gin.PUT("/user/update/rights", delivery.Authentificate, delivery.Authorize, delivery.ChangeUserRole)
	gin.PUT("/user/update/password", delivery.Authentificate, delivery.Authorize, delivery.ChangeUserPassword)
	gin.DELETE("/user/delete/:userID", delivery.Authentificate, delivery.Authorize, delivery.DeleteItem)

	router.Engine = gin
	return router
}

func CORSMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "false")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With, X-Auth-Token")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS, GET, PUT, DELETE")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}
