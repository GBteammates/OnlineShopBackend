// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cache/cache_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OnlineShopBackend/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIItemsCache is a mock of IItemsCache interface.
type MockIItemsCache struct {
	ctrl     *gomock.Controller
	recorder *MockIItemsCacheMockRecorder
}

// MockIItemsCacheMockRecorder is the mock recorder for MockIItemsCache.
type MockIItemsCacheMockRecorder struct {
	mock *MockIItemsCache
}

// NewMockIItemsCache creates a new mock instance.
func NewMockIItemsCache(ctrl *gomock.Controller) *MockIItemsCache {
	mock := &MockIItemsCache{ctrl: ctrl}
	mock.recorder = &MockIItemsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemsCache) EXPECT() *MockIItemsCacheMockRecorder {
	return m.recorder
}

// CheckCache mocks base method.
func (m *MockIItemsCache) CheckCache(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCache", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCache indicates an expected call of CheckCache.
func (mr *MockIItemsCacheMockRecorder) CheckCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCache", reflect.TypeOf((*MockIItemsCache)(nil).CheckCache), ctx, key)
}

// CreateFavouriteItemsIdCache mocks base method.
func (m *MockIItemsCache) CreateFavouriteItemsIdCache(ctx context.Context, res map[uuid.UUID]uuid.UUID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavouriteItemsIdCache", ctx, res, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavouriteItemsIdCache indicates an expected call of CreateFavouriteItemsIdCache.
func (mr *MockIItemsCacheMockRecorder) CreateFavouriteItemsIdCache(ctx, res, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavouriteItemsIdCache", reflect.TypeOf((*MockIItemsCache)(nil).CreateFavouriteItemsIdCache), ctx, res, key)
}

// CreateItemsCache mocks base method.
func (m *MockIItemsCache) CreateItemsCache(ctx context.Context, res []models.Item, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemsCache", ctx, res, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItemsCache indicates an expected call of CreateItemsCache.
func (mr *MockIItemsCacheMockRecorder) CreateItemsCache(ctx, res, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemsCache", reflect.TypeOf((*MockIItemsCache)(nil).CreateItemsCache), ctx, res, key)
}

// CreateItemsQuantityCache mocks base method.
func (m *MockIItemsCache) CreateItemsQuantityCache(ctx context.Context, value int, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemsQuantityCache", ctx, value, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItemsQuantityCache indicates an expected call of CreateItemsQuantityCache.
func (mr *MockIItemsCacheMockRecorder) CreateItemsQuantityCache(ctx, value, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemsQuantityCache", reflect.TypeOf((*MockIItemsCache)(nil).CreateItemsQuantityCache), ctx, value, key)
}

// GetFavouriteItemsIdCache mocks base method.
func (m *MockIItemsCache) GetFavouriteItemsIdCache(ctx context.Context, key string) (*map[uuid.UUID]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavouriteItemsIdCache", ctx, key)
	ret0, _ := ret[0].(*map[uuid.UUID]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavouriteItemsIdCache indicates an expected call of GetFavouriteItemsIdCache.
func (mr *MockIItemsCacheMockRecorder) GetFavouriteItemsIdCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavouriteItemsIdCache", reflect.TypeOf((*MockIItemsCache)(nil).GetFavouriteItemsIdCache), ctx, key)
}

// GetItemsCache mocks base method.
func (m *MockIItemsCache) GetItemsCache(ctx context.Context, key string) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsCache", ctx, key)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsCache indicates an expected call of GetItemsCache.
func (mr *MockIItemsCacheMockRecorder) GetItemsCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsCache", reflect.TypeOf((*MockIItemsCache)(nil).GetItemsCache), ctx, key)
}

// GetItemsQuantityCache mocks base method.
func (m *MockIItemsCache) GetItemsQuantityCache(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsQuantityCache", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsQuantityCache indicates an expected call of GetItemsQuantityCache.
func (mr *MockIItemsCacheMockRecorder) GetItemsQuantityCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsQuantityCache", reflect.TypeOf((*MockIItemsCache)(nil).GetItemsQuantityCache), ctx, key)
}

// MockICategoriesCache is a mock of ICategoriesCache interface.
type MockICategoriesCache struct {
	ctrl     *gomock.Controller
	recorder *MockICategoriesCacheMockRecorder
}

// MockICategoriesCacheMockRecorder is the mock recorder for MockICategoriesCache.
type MockICategoriesCacheMockRecorder struct {
	mock *MockICategoriesCache
}

// NewMockICategoriesCache creates a new mock instance.
func NewMockICategoriesCache(ctrl *gomock.Controller) *MockICategoriesCache {
	mock := &MockICategoriesCache{ctrl: ctrl}
	mock.recorder = &MockICategoriesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoriesCache) EXPECT() *MockICategoriesCacheMockRecorder {
	return m.recorder
}

// CheckCache mocks base method.
func (m *MockICategoriesCache) CheckCache(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCache", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCache indicates an expected call of CheckCache.
func (mr *MockICategoriesCacheMockRecorder) CheckCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCache", reflect.TypeOf((*MockICategoriesCache)(nil).CheckCache), ctx, key)
}

// CreateCategoriesListСache mocks base method.
func (m *MockICategoriesCache) CreateCategoriesListСache(ctx context.Context, categories []models.Category, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoriesListСache", ctx, categories, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategoriesListСache indicates an expected call of CreateCategoriesListСache.
func (mr *MockICategoriesCacheMockRecorder) CreateCategoriesListСache(ctx, categories, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoriesListСache", reflect.TypeOf((*MockICategoriesCache)(nil).CreateCategoriesListСache), ctx, categories, key)
}

// DeleteCache mocks base method.
func (m *MockICategoriesCache) DeleteCache(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCache", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockICategoriesCacheMockRecorder) DeleteCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockICategoriesCache)(nil).DeleteCache), ctx, key)
}

// GetCategoriesListCache mocks base method.
func (m *MockICategoriesCache) GetCategoriesListCache(ctx context.Context, key string) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesListCache", ctx, key)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesListCache indicates an expected call of GetCategoriesListCache.
func (mr *MockICategoriesCacheMockRecorder) GetCategoriesListCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesListCache", reflect.TypeOf((*MockICategoriesCache)(nil).GetCategoriesListCache), ctx, key)
}
