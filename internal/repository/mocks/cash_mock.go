// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cash/cash_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OnlineShopBackend/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCash is a mock of Cash interface.
type MockCash struct {
	ctrl     *gomock.Controller
	recorder *MockCashMockRecorder
}

// MockCashMockRecorder is the mock recorder for MockCash.
type MockCashMockRecorder struct {
	mock *MockCash
}

// NewMockCash creates a new mock instance.
func NewMockCash(ctrl *gomock.Controller) *MockCash {
	mock := &MockCash{ctrl: ctrl}
	mock.recorder = &MockCashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCash) EXPECT() *MockCashMockRecorder {
	return m.recorder
}

// CheckCash mocks base method.
func (m *MockCash) CheckCash(ctx context.Context, key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCash", ctx, key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCash indicates an expected call of CheckCash.
func (mr *MockCashMockRecorder) CheckCash(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCash", reflect.TypeOf((*MockCash)(nil).CheckCash), ctx, key)
}

// CreateItemsCash mocks base method.
func (m *MockCash) CreateItemsCash(ctx context.Context, res []models.Item, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemsCash", ctx, res, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItemsCash indicates an expected call of CreateItemsCash.
func (mr *MockCashMockRecorder) CreateItemsCash(ctx, res, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemsCash", reflect.TypeOf((*MockCash)(nil).CreateItemsCash), ctx, res, key)
}

// CreateItemsQuantityCash mocks base method.
func (m *MockCash) CreateItemsQuantityCash(ctx context.Context, value int, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemsQuantityCash", ctx, value, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItemsQuantityCash indicates an expected call of CreateItemsQuantityCash.
func (mr *MockCashMockRecorder) CreateItemsQuantityCash(ctx, value, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemsQuantityCash", reflect.TypeOf((*MockCash)(nil).CreateItemsQuantityCash), ctx, value, key)
}

// GetItemsCash mocks base method.
func (m *MockCash) GetItemsCash(ctx context.Context, key string) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsCash", ctx, key)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsCash indicates an expected call of GetItemsCash.
func (mr *MockCashMockRecorder) GetItemsCash(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsCash", reflect.TypeOf((*MockCash)(nil).GetItemsCash), ctx, key)
}

// GetItemsQuantityCash mocks base method.
func (m *MockCash) GetItemsQuantityCash(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsQuantityCash", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsQuantityCash indicates an expected call of GetItemsQuantityCash.
func (mr *MockCashMockRecorder) GetItemsQuantityCash(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsQuantityCash", reflect.TypeOf((*MockCash)(nil).GetItemsQuantityCash), ctx, key)
}
