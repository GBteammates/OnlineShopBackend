package usecase

import (
	"OnlineShopBackend/internal/models"
	mocks "OnlineShopBackend/internal/usecase/repo_mocks"
	"context"
	"errors"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/google/uuid"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

func TestUploadCategoryImage(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	logger := zap.L().Sugar()
	store := mocks.NewMockCategoryStore(ctrl)
	cache := mocks.NewMockICategoriesCache(ctrl)
	filestorage := mocks.NewMockFilestorage(ctrl)
	ctx := context.Background()
	usecase := New(store, cache, filestorage, logger)
	id := uuid.New()
	filename := "testName"
	file := []byte{0xff, 0xd8, 0xff, 0xe0, 0x0, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x0, 0x1, 0x1, 0x1, 0x0, 0x48, 0x0, 0x48, 0x0, 0x0, 0xff, 0xe1, 0x0, 0x22, 0x45, 0x78, 0x69, 0x66, 0x0, 0x0, 0x4d, 0x4d, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x8, 0x0, 0x1, 0x1, 0x12, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xfe, 0x0, 0xd, 0x53, 0x65, 0x63, 0x6c, 0x75, 0x62, 0x2e, 0x6f, 0x72, 0x67, 0x0, 0xff, 0xdb, 0x0, 0x43, 0x0, 0x2, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x6, 0x4, 0x4, 0x3, 0x5, 0x7, 0x6, 0x7, 0x7, 0x7, 0x6, 0x7, 0x7, 0x8, 0x9, 0xb, 0x9, 0x8, 0x8, 0xa, 0x8, 0x7, 0x7, 0xa, 0xd, 0xa, 0xa, 0xb, 0xc, 0xc, 0xc, 0xc, 0x7, 0x9, 0xe, 0xf, 0xd, 0xc, 0xe, 0xb, 0xc, 0xc, 0xc, 0xff, 0xdb, 0x0, 0x43, 0x1, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x6, 0x3, 0x3, 0x6, 0xc, 0x8, 0x7, 0x8, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xc, 0xff, 0xc0, 0x0, 0x11, 0x8, 0x0, 0x1, 0x0, 0x1, 0x3, 0x1, 0x22, 0x0, 0x2, 0x11, 0x1, 0x3, 0x11, 0x1, 0xff, 0xc4, 0x0, 0x1f, 0x0, 0x0, 0x1, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xff, 0xc4, 0x0, 0xb5, 0x10, 0x0, 0x2, 0x1, 0x3, 0x3, 0x2, 0x4, 0x3, 0x5, 0x5, 0x4, 0x4, 0x0, 0x0, 0x1, 0x7d, 0x1, 0x2, 0x3, 0x0, 0x4, 0x11, 0x5, 0x12, 0x21, 0x31, 0x41, 0x6, 0x13, 0x51, 0x61, 0x7, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x8, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x9, 0xa, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92,
		0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x0, 0x1f, 0x1, 0x0, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xff, 0xc4, 0x0, 0xb5, 0x11, 0x0, 0x2, 0x1, 0x2, 0x4, 0x4, 0x3, 0x4, 0x7, 0x5, 0x4, 0x4, 0x0, 0x1, 0x2, 0x77, 0x0, 0x1, 0x2, 0x3, 0x11, 0x4, 0x5, 0x21, 0x31, 0x6, 0x12, 0x41, 0x51, 0x7, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x8, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x9, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0xa, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x0, 0xc, 0x3, 0x1, 0x0, 0x2, 0x11, 0x3, 0x11, 0x0, 0x3f, 0x0, 0xfc, 0x8b, 0xa2, 0x8a, 0x2b, 0xf3, 0xb3, 0xf6, 0x83, 0xff, 0xd9}
	category := &models.Category{
		Id:          id,
		Name:        "testName",
		Description: "testDescription",
		Image:       "testImage",
	}
	path := "testPath"
	testErr := errors.New("error")
	t.Run("error get category", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(nil, testErr)
		err := usecase.UploadImage(ctx, id, filename, file)
		require.Error(t, err)
	})
	t.Run("error put image", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().PutCategoryImage(id.String(), filename, file).Return("", testErr)
		err := usecase.UploadImage(ctx, id, filename, file)
		require.Error(t, err)
	})
	t.Run("error update category", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().PutCategoryImage(id.String(), filename, file).Return(path, nil)
		store.EXPECT().Update(ctx, category).Return(testErr)
		err := usecase.UploadImage(ctx, id, filename, file)
		require.Error(t, err)
	})
	t.Run("success upload image", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().PutCategoryImage(id.String(), filename, file).Return(path, nil)
		store.EXPECT().Update(ctx, category).Return(nil)
		cache.EXPECT().UpdateCache(ctx, category, models.UpdateOp).Return(nil)
		err := usecase.UploadImage(ctx, id, filename, file)
		require.NoError(t, err)
	})
}

func TestDeleteImage(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	logger := zap.L().Sugar()
	store := mocks.NewMockCategoryStore(ctrl)
	cache := mocks.NewMockICategoriesCache(ctrl)
	filestorage := mocks.NewMockFilestorage(ctrl)
	ctx := context.Background()
	usecase := New(store, cache, filestorage, logger)
	id := uuid.New()
	filename := "testName"
	testErr := errors.New("error")
	category := &models.Category{
		Id:          id,
		Name:        "testName",
		Description: "testDescription",
		Image:       "testImage",
	}
	t.Run("error get category", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(nil, testErr)
		err := usecase.DeleteImage(ctx, id, filename)
		require.Error(t, err)
	})
	t.Run("error filestorage delete image", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().DeleteCategoryImage(id.String(), filename).Return(testErr)
		err := usecase.DeleteImage(ctx, id, filename)
		require.Error(t, err)
	})
	t.Run("error store update category", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().DeleteCategoryImage(id.String(), filename).Return(nil)
		store.EXPECT().Update(ctx, category).Return(testErr)
		err := usecase.DeleteImage(ctx, id, filename)
		require.Error(t, err)
	})
	t.Run("success delete category image", func(t *testing.T) {
		store.EXPECT().Get(ctx, id).Return(category, nil)
		filestorage.EXPECT().DeleteCategoryImage(id.String(), filename).Return(nil)
		store.EXPECT().Update(ctx, category).Return(nil)
		cache.EXPECT().UpdateCache(ctx, category, models.UpdateOp).Return(nil)
		err := usecase.DeleteImage(ctx, id, filename)
		require.NoError(t, err)
	})
}

func TestListImages(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	logger := zap.L().Sugar()
	store := mocks.NewMockCategoryStore(ctrl)
	cache := mocks.NewMockICategoriesCache(ctrl)
	filestorage := mocks.NewMockFilestorage(ctrl)
	ctx := context.Background()
	usecase := New(store, cache, filestorage, logger)
	testErr := errors.New("error")
	images := []*models.FileInfo{}
	t.Run("error get categories images list", func(t *testing.T) {
		filestorage.EXPECT().GetCategoriesImagesList().Return(nil, testErr)
		res, err := usecase.ListImages(ctx)
		require.Error(t, err)
		require.Nil(t, res)
	})
	t.Run("success get categories images list", func(t *testing.T) {
		filestorage.EXPECT().GetCategoriesImagesList().Return(images, nil)
		res, err := usecase.ListImages(ctx)
		require.NoError(t, err)
		require.Equal(t, images, res)
	})
}

func TestDeleteImageById(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()
	logger := zap.L().Sugar()
	store := mocks.NewMockCategoryStore(ctrl)
	cache := mocks.NewMockICategoriesCache(ctrl)
	filestorage := mocks.NewMockFilestorage(ctrl)
	ctx := context.Background()
	usecase := New(store, cache, filestorage, logger)
	id := uuid.New()
	testErr := errors.New("error")
	t.Run("error delete image by id", func(t *testing.T) {
		filestorage.EXPECT().DeleteCategoryImageById(id.String()).Return(testErr)
		err := usecase.DeleteImageById(ctx, id)
		require.Error(t, err)
	})
	t.Run("success delete image by id", func(t *testing.T) {
		filestorage.EXPECT().DeleteCategoryImageById(id.String()).Return(nil)
		err := usecase.DeleteImageById(ctx, id)
		require.NoError(t, err)
	})
}
