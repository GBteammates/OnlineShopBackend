// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces/cache_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OnlineShopBackend/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIItemsCache is a mock of IItemsCache interface.
type MockIItemsCache struct {
	ctrl     *gomock.Controller
	recorder *MockIItemsCacheMockRecorder
}

// MockIItemsCacheMockRecorder is the mock recorder for MockIItemsCache.
type MockIItemsCacheMockRecorder struct {
	mock *MockIItemsCache
}

// NewMockIItemsCache creates a new mock instance.
func NewMockIItemsCache(ctrl *gomock.Controller) *MockIItemsCache {
	mock := &MockIItemsCache{ctrl: ctrl}
	mock.recorder = &MockIItemsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemsCache) EXPECT() *MockIItemsCacheMockRecorder {
	return m.recorder
}

// FavouriteItemsIdsFromCache mocks base method.
func (m *MockIItemsCache) FavouriteItemsIdsFromCache(ctx context.Context, key, kind string) (*map[uuid.UUID]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavouriteItemsIdsFromCache", ctx, key, kind)
	ret0, _ := ret[0].(*map[uuid.UUID]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FavouriteItemsIdsFromCache indicates an expected call of FavouriteItemsIdsFromCache.
func (mr *MockIItemsCacheMockRecorder) FavouriteItemsIdsFromCache(ctx, key, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavouriteItemsIdsFromCache", reflect.TypeOf((*MockIItemsCache)(nil).FavouriteItemsIdsFromCache), ctx, key, kind)
}

// FavouriteItemsIdsToCache mocks base method.
func (m *MockIItemsCache) FavouriteItemsIdsToCache(ctx context.Context, favIds *map[uuid.UUID]uuid.UUID, key, kind string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FavouriteItemsIdsToCache", ctx, favIds, key, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// FavouriteItemsIdsToCache indicates an expected call of FavouriteItemsIdsToCache.
func (mr *MockIItemsCacheMockRecorder) FavouriteItemsIdsToCache(ctx, favIds, key, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FavouriteItemsIdsToCache", reflect.TypeOf((*MockIItemsCache)(nil).FavouriteItemsIdsToCache), ctx, favIds, key, kind)
}

// ItemsFromCache mocks base method.
func (m *MockIItemsCache) ItemsFromCache(ctx context.Context, cacheKey, kind string) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsFromCache", ctx, cacheKey, kind)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsFromCache indicates an expected call of ItemsFromCache.
func (mr *MockIItemsCacheMockRecorder) ItemsFromCache(ctx, cacheKey, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsFromCache", reflect.TypeOf((*MockIItemsCache)(nil).ItemsFromCache), ctx, cacheKey, kind)
}

// ItemsQuantityFromCache mocks base method.
func (m *MockIItemsCache) ItemsQuantityFromCache(ctx context.Context, key, kind string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsQuantityFromCache", ctx, key, kind)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemsQuantityFromCache indicates an expected call of ItemsQuantityFromCache.
func (mr *MockIItemsCacheMockRecorder) ItemsQuantityFromCache(ctx, key, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsQuantityFromCache", reflect.TypeOf((*MockIItemsCache)(nil).ItemsQuantityFromCache), ctx, key, kind)
}

// ItemsQuantityToCache mocks base method.
func (m *MockIItemsCache) ItemsQuantityToCache(ctx context.Context, value int, key, kind string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsQuantityToCache", ctx, value, key, kind)
	ret0, _ := ret[0].(error)
	return ret0
}

// ItemsQuantityToCache indicates an expected call of ItemsQuantityToCache.
func (mr *MockIItemsCacheMockRecorder) ItemsQuantityToCache(ctx, value, key, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsQuantityToCache", reflect.TypeOf((*MockIItemsCache)(nil).ItemsQuantityToCache), ctx, value, key, kind)
}

// ItemsToCache mocks base method.
func (m *MockIItemsCache) ItemsToCache(ctx context.Context, items []models.Item, kind, param string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemsToCache", ctx, items, kind, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// ItemsToCache indicates an expected call of ItemsToCache.
func (mr *MockIItemsCacheMockRecorder) ItemsToCache(ctx, items, kind, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemsToCache", reflect.TypeOf((*MockIItemsCache)(nil).ItemsToCache), ctx, items, kind, param)
}

// UpdateCache mocks base method.
func (m *MockIItemsCache) UpdateCache(ctx context.Context, opts *models.CacheOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCache", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockIItemsCacheMockRecorder) UpdateCache(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockIItemsCache)(nil).UpdateCache), ctx, opts)
}

// UpdateFavIdsCache mocks base method.
func (m *MockIItemsCache) UpdateFavIdsCache(ctx context.Context, userId uuid.UUID, item *models.Item, op string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFavIdsCache", ctx, userId, item, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFavIdsCache indicates an expected call of UpdateFavIdsCache.
func (mr *MockIItemsCacheMockRecorder) UpdateFavIdsCache(ctx, userId, item, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFavIdsCache", reflect.TypeOf((*MockIItemsCache)(nil).UpdateFavIdsCache), ctx, userId, item, op)
}

// MockICategoriesCache is a mock of ICategoriesCache interface.
type MockICategoriesCache struct {
	ctrl     *gomock.Controller
	recorder *MockICategoriesCacheMockRecorder
}

// MockICategoriesCacheMockRecorder is the mock recorder for MockICategoriesCache.
type MockICategoriesCacheMockRecorder struct {
	mock *MockICategoriesCache
}

// NewMockICategoriesCache creates a new mock instance.
func NewMockICategoriesCache(ctrl *gomock.Controller) *MockICategoriesCache {
	mock := &MockICategoriesCache{ctrl: ctrl}
	mock.recorder = &MockICategoriesCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoriesCache) EXPECT() *MockICategoriesCacheMockRecorder {
	return m.recorder
}

// CategoriesFromCache mocks base method.
func (m *MockICategoriesCache) CategoriesFromCache(ctx context.Context, key string) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoriesFromCache", ctx, key)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoriesFromCache indicates an expected call of CategoriesFromCache.
func (mr *MockICategoriesCacheMockRecorder) CategoriesFromCache(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoriesFromCache", reflect.TypeOf((*MockICategoriesCache)(nil).CategoriesFromCache), ctx, key)
}

// CategoriesToCache mocks base method.
func (m *MockICategoriesCache) CategoriesToCache(ctx context.Context, categories []models.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoriesToCache", ctx, categories)
	ret0, _ := ret[0].(error)
	return ret0
}

// CategoriesToCache indicates an expected call of CategoriesToCache.
func (mr *MockICategoriesCacheMockRecorder) CategoriesToCache(ctx, categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoriesToCache", reflect.TypeOf((*MockICategoriesCache)(nil).CategoriesToCache), ctx, categories)
}

// DeleteCache mocks base method.
func (m *MockICategoriesCache) DeleteCache(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCache", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCache indicates an expected call of DeleteCache.
func (mr *MockICategoriesCacheMockRecorder) DeleteCache(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCache", reflect.TypeOf((*MockICategoriesCache)(nil).DeleteCache), ctx, name)
}

// UpdateCache mocks base method.
func (m *MockICategoriesCache) UpdateCache(ctx context.Context, newCategory *models.Category, op string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCache", ctx, newCategory, op)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockICategoriesCacheMockRecorder) UpdateCache(ctx, newCategory, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockICategoriesCache)(nil).UpdateCache), ctx, newCategory, op)
}
