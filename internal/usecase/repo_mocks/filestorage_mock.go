// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces/fs_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OnlineShopBackend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilestorage is a mock of Filestorage interface.
type MockFilestorage struct {
	ctrl     *gomock.Controller
	recorder *MockFilestorageMockRecorder
}

// MockFilestorageMockRecorder is the mock recorder for MockFilestorage.
type MockFilestorageMockRecorder struct {
	mock *MockFilestorage
}

// NewMockFilestorage creates a new mock instance.
func NewMockFilestorage(ctrl *gomock.Controller) *MockFilestorage {
	mock := &MockFilestorage{ctrl: ctrl}
	mock.recorder = &MockFilestorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilestorage) EXPECT() *MockFilestorageMockRecorder {
	return m.recorder
}

// DeleteCategoryImage mocks base method.
func (m *MockFilestorage) DeleteCategoryImage(id, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryImage", id, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryImage indicates an expected call of DeleteCategoryImage.
func (mr *MockFilestorageMockRecorder) DeleteCategoryImage(id, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryImage", reflect.TypeOf((*MockFilestorage)(nil).DeleteCategoryImage), id, filename)
}

// DeleteCategoryImageById mocks base method.
func (m *MockFilestorage) DeleteCategoryImageById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryImageById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryImageById indicates an expected call of DeleteCategoryImageById.
func (mr *MockFilestorageMockRecorder) DeleteCategoryImageById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryImageById", reflect.TypeOf((*MockFilestorage)(nil).DeleteCategoryImageById), id)
}

// DeleteItemImage mocks base method.
func (m *MockFilestorage) DeleteItemImage(id, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemImage", id, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemImage indicates an expected call of DeleteItemImage.
func (mr *MockFilestorageMockRecorder) DeleteItemImage(id, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemImage", reflect.TypeOf((*MockFilestorage)(nil).DeleteItemImage), id, filename)
}

// DeleteItemImagesFolderById mocks base method.
func (m *MockFilestorage) DeleteItemImagesFolderById(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemImagesFolderById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemImagesFolderById indicates an expected call of DeleteItemImagesFolderById.
func (mr *MockFilestorageMockRecorder) DeleteItemImagesFolderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemImagesFolderById", reflect.TypeOf((*MockFilestorage)(nil).DeleteItemImagesFolderById), id)
}

// GetCategoriesImagesList mocks base method.
func (m *MockFilestorage) GetCategoriesImagesList() ([]*models.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesImagesList")
	ret0, _ := ret[0].([]*models.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesImagesList indicates an expected call of GetCategoriesImagesList.
func (mr *MockFilestorageMockRecorder) GetCategoriesImagesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesImagesList", reflect.TypeOf((*MockFilestorage)(nil).GetCategoriesImagesList))
}

// GetItemsImagesList mocks base method.
func (m *MockFilestorage) GetItemsImagesList() ([]*models.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsImagesList")
	ret0, _ := ret[0].([]*models.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsImagesList indicates an expected call of GetItemsImagesList.
func (mr *MockFilestorageMockRecorder) GetItemsImagesList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsImagesList", reflect.TypeOf((*MockFilestorage)(nil).GetItemsImagesList))
}

// PutCategoryImage mocks base method.
func (m *MockFilestorage) PutCategoryImage(id, filename string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCategoryImage", id, filename, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutCategoryImage indicates an expected call of PutCategoryImage.
func (mr *MockFilestorageMockRecorder) PutCategoryImage(id, filename, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCategoryImage", reflect.TypeOf((*MockFilestorage)(nil).PutCategoryImage), id, filename, file)
}

// PutItemImage mocks base method.
func (m *MockFilestorage) PutItemImage(id, filename string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItemImage", id, filename, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItemImage indicates an expected call of PutItemImage.
func (mr *MockFilestorageMockRecorder) PutItemImage(id, filename, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemImage", reflect.TypeOf((*MockFilestorage)(nil).PutItemImage), id, filename, file)
}
