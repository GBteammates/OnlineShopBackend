// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interfaces/usecase_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "OnlineShopBackend/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIItemUsecase is a mock of IItemUsecase interface.
type MockIItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIItemUsecaseMockRecorder
}

// MockIItemUsecaseMockRecorder is the mock recorder for MockIItemUsecase.
type MockIItemUsecaseMockRecorder struct {
	mock *MockIItemUsecase
}

// NewMockIItemUsecase creates a new mock instance.
func NewMockIItemUsecase(ctrl *gomock.Controller) *MockIItemUsecase {
	mock := &MockIItemUsecase{ctrl: ctrl}
	mock.recorder = &MockIItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemUsecase) EXPECT() *MockIItemUsecaseMockRecorder {
	return m.recorder
}

// AddFavouriteItem mocks base method.
func (m *MockIItemUsecase) AddFavouriteItem(ctx context.Context, userId, itemId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavouriteItem", ctx, userId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavouriteItem indicates an expected call of AddFavouriteItem.
func (mr *MockIItemUsecaseMockRecorder) AddFavouriteItem(ctx, userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavouriteItem", reflect.TypeOf((*MockIItemUsecase)(nil).AddFavouriteItem), ctx, userId, itemId)
}

// Create mocks base method.
func (m *MockIItemUsecase) Create(ctx context.Context, item *models.Item) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, item)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIItemUsecaseMockRecorder) Create(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIItemUsecase)(nil).Create), ctx, item)
}

// Delete mocks base method.
func (m *MockIItemUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIItemUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIItemUsecase)(nil).Delete), ctx, id)
}

// DeleteFavouriteItem mocks base method.
func (m *MockIItemUsecase) DeleteFavouriteItem(ctx context.Context, userId, itemId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavouriteItem", ctx, userId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavouriteItem indicates an expected call of DeleteFavouriteItem.
func (mr *MockIItemUsecaseMockRecorder) DeleteFavouriteItem(ctx, userId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavouriteItem", reflect.TypeOf((*MockIItemUsecase)(nil).DeleteFavouriteItem), ctx, userId, itemId)
}

// DeleteImage mocks base method.
func (m *MockIItemUsecase) DeleteImage(ctx context.Context, id uuid.UUID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockIItemUsecaseMockRecorder) DeleteImage(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockIItemUsecase)(nil).DeleteImage), ctx, id, name)
}

// DeleteImagesFolder mocks base method.
func (m *MockIItemUsecase) DeleteImagesFolder(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagesFolder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImagesFolder indicates an expected call of DeleteImagesFolder.
func (mr *MockIItemUsecaseMockRecorder) DeleteImagesFolder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagesFolder", reflect.TypeOf((*MockIItemUsecase)(nil).DeleteImagesFolder), ctx, id)
}

// Get mocks base method.
func (m *MockIItemUsecase) Get(ctx context.Context, id uuid.UUID) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIItemUsecaseMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIItemUsecase)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockIItemUsecase) List(ctx context.Context, opts *models.ListOptions) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIItemUsecaseMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIItemUsecase)(nil).List), ctx, opts)
}

// ListFavouriteItemsId mocks base method.
func (m *MockIItemUsecase) ListFavouriteItemsId(ctx context.Context, userId uuid.UUID) (*map[uuid.UUID]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFavouriteItemsId", ctx, userId)
	ret0, _ := ret[0].(*map[uuid.UUID]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFavouriteItemsId indicates an expected call of ListFavouriteItemsId.
func (mr *MockIItemUsecaseMockRecorder) ListFavouriteItemsId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFavouriteItemsId", reflect.TypeOf((*MockIItemUsecase)(nil).ListFavouriteItemsId), ctx, userId)
}

// ListImages mocks base method.
func (m *MockIItemUsecase) ListImages(ctx context.Context) ([]*models.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx)
	ret0, _ := ret[0].([]*models.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockIItemUsecaseMockRecorder) ListImages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockIItemUsecase)(nil).ListImages), ctx)
}

// Quantity mocks base method.
func (m *MockIItemUsecase) Quantity(ctx context.Context, opts *models.QuantityOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quantity", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Quantity indicates an expected call of Quantity.
func (mr *MockIItemUsecaseMockRecorder) Quantity(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quantity", reflect.TypeOf((*MockIItemUsecase)(nil).Quantity), ctx, opts)
}

// Update mocks base method.
func (m *MockIItemUsecase) Update(ctx context.Context, item *models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIItemUsecaseMockRecorder) Update(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIItemUsecase)(nil).Update), ctx, item)
}

// UploadImage mocks base method.
func (m *MockIItemUsecase) UploadImage(ctx context.Context, id uuid.UUID, name string, file []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, id, name, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockIItemUsecaseMockRecorder) UploadImage(ctx, id, name, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockIItemUsecase)(nil).UploadImage), ctx, id, name, file)
}

// MockICategoryUsecase is a mock of ICategoryUsecase interface.
type MockICategoryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryUsecaseMockRecorder
}

// MockICategoryUsecaseMockRecorder is the mock recorder for MockICategoryUsecase.
type MockICategoryUsecaseMockRecorder struct {
	mock *MockICategoryUsecase
}

// NewMockICategoryUsecase creates a new mock instance.
func NewMockICategoryUsecase(ctrl *gomock.Controller) *MockICategoryUsecase {
	mock := &MockICategoryUsecase{ctrl: ctrl}
	mock.recorder = &MockICategoryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryUsecase) EXPECT() *MockICategoryUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICategoryUsecase) Create(ctx context.Context, category *models.Category) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICategoryUsecaseMockRecorder) Create(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICategoryUsecase)(nil).Create), ctx, category)
}

// Delete mocks base method.
func (m *MockICategoryUsecase) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICategoryUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICategoryUsecase)(nil).Delete), ctx, id)
}

// DeleteImage mocks base method.
func (m *MockICategoryUsecase) DeleteImage(ctx context.Context, id uuid.UUID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockICategoryUsecaseMockRecorder) DeleteImage(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockICategoryUsecase)(nil).DeleteImage), ctx, id, name)
}

// DeleteImageById mocks base method.
func (m *MockICategoryUsecase) DeleteImageById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageById indicates an expected call of DeleteImageById.
func (mr *MockICategoryUsecaseMockRecorder) DeleteImageById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageById", reflect.TypeOf((*MockICategoryUsecase)(nil).DeleteImageById), ctx, id)
}

// Get mocks base method.
func (m *MockICategoryUsecase) Get(ctx context.Context, param string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, param)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICategoryUsecaseMockRecorder) Get(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICategoryUsecase)(nil).Get), ctx, param)
}

// List mocks base method.
func (m *MockICategoryUsecase) List(ctx context.Context) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockICategoryUsecaseMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockICategoryUsecase)(nil).List), ctx)
}

// ListImages mocks base method.
func (m *MockICategoryUsecase) ListImages(ctx context.Context) ([]*models.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx)
	ret0, _ := ret[0].([]*models.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockICategoryUsecaseMockRecorder) ListImages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockICategoryUsecase)(nil).ListImages), ctx)
}

// Update mocks base method.
func (m *MockICategoryUsecase) Update(ctx context.Context, category *models.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICategoryUsecaseMockRecorder) Update(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICategoryUsecase)(nil).Update), ctx, category)
}

// UploadImage mocks base method.
func (m *MockICategoryUsecase) UploadImage(ctx context.Context, id uuid.UUID, name string, file []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, id, name, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockICategoryUsecaseMockRecorder) UploadImage(ctx, id, name, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockICategoryUsecase)(nil).UploadImage), ctx, id, name, file)
}

// MockIOrderUsecase is a mock of IOrderUsecase interface.
type MockIOrderUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderUsecaseMockRecorder
}

// MockIOrderUsecaseMockRecorder is the mock recorder for MockIOrderUsecase.
type MockIOrderUsecaseMockRecorder struct {
	mock *MockIOrderUsecase
}

// NewMockIOrderUsecase creates a new mock instance.
func NewMockIOrderUsecase(ctrl *gomock.Controller) *MockIOrderUsecase {
	mock := &MockIOrderUsecase{ctrl: ctrl}
	mock.recorder = &MockIOrderUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderUsecase) EXPECT() *MockIOrderUsecaseMockRecorder {
	return m.recorder
}

// ChangeAddress mocks base method.
func (m *MockIOrderUsecase) ChangeAddress(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAddress", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAddress indicates an expected call of ChangeAddress.
func (mr *MockIOrderUsecaseMockRecorder) ChangeAddress(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAddress", reflect.TypeOf((*MockIOrderUsecase)(nil).ChangeAddress), ctx, order)
}

// ChangeStatus mocks base method.
func (m *MockIOrderUsecase) ChangeStatus(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockIOrderUsecaseMockRecorder) ChangeStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockIOrderUsecase)(nil).ChangeStatus), ctx, order)
}

// Create mocks base method.
func (m *MockIOrderUsecase) Create(ctx context.Context, cart *models.Cart, user models.User, address models.UserAddress) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cart, user, address)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIOrderUsecaseMockRecorder) Create(ctx, cart, user, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIOrderUsecase)(nil).Create), ctx, cart, user, address)
}

// Delete mocks base method.
func (m *MockIOrderUsecase) Delete(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIOrderUsecaseMockRecorder) Delete(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIOrderUsecase)(nil).Delete), ctx, order)
}

// Get mocks base method.
func (m *MockIOrderUsecase) Get(ctx context.Context, id uuid.UUID) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIOrderUsecaseMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIOrderUsecase)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockIOrderUsecase) List(ctx context.Context, user *models.User) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, user)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIOrderUsecaseMockRecorder) List(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIOrderUsecase)(nil).List), ctx, user)
}

// MockICartUsecase is a mock of ICartUsecase interface.
type MockICartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockICartUsecaseMockRecorder
}

// MockICartUsecaseMockRecorder is the mock recorder for MockICartUsecase.
type MockICartUsecaseMockRecorder struct {
	mock *MockICartUsecase
}

// NewMockICartUsecase creates a new mock instance.
func NewMockICartUsecase(ctrl *gomock.Controller) *MockICartUsecase {
	mock := &MockICartUsecase{ctrl: ctrl}
	mock.recorder = &MockICartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICartUsecase) EXPECT() *MockICartUsecaseMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockICartUsecase) AddItem(ctx context.Context, cartId, itemId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", ctx, cartId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockICartUsecaseMockRecorder) AddItem(ctx, cartId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockICartUsecase)(nil).AddItem), ctx, cartId, itemId)
}

// CartByUserId mocks base method.
func (m *MockICartUsecase) CartByUserId(ctx context.Context, userId uuid.UUID) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartByUserId", ctx, userId)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CartByUserId indicates an expected call of CartByUserId.
func (mr *MockICartUsecaseMockRecorder) CartByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartByUserId", reflect.TypeOf((*MockICartUsecase)(nil).CartByUserId), ctx, userId)
}

// Create mocks base method.
func (m *MockICartUsecase) Create(ctx context.Context, userId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICartUsecaseMockRecorder) Create(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICartUsecase)(nil).Create), ctx, userId)
}

// Delete mocks base method.
func (m *MockICartUsecase) Delete(ctx context.Context, cartId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cartId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICartUsecaseMockRecorder) Delete(ctx, cartId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICartUsecase)(nil).Delete), ctx, cartId)
}

// DeleteItem mocks base method.
func (m *MockICartUsecase) DeleteItem(ctx context.Context, cartId, itemId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, cartId, itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockICartUsecaseMockRecorder) DeleteItem(ctx, cartId, itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockICartUsecase)(nil).DeleteItem), ctx, cartId, itemId)
}

// Get mocks base method.
func (m *MockICartUsecase) Get(ctx context.Context, cartId uuid.UUID) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, cartId)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICartUsecaseMockRecorder) Get(ctx, cartId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICartUsecase)(nil).Get), ctx, cartId)
}

// MockIUserUsecase is a mock of IUserUsecase interface.
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase.
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance.
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserUsecase) Create(ctx context.Context, user *models.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserUsecaseMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserUsecase)(nil).Create), ctx, user)
}

// CreateRights mocks base method.
func (m *MockIUserUsecase) CreateRights(ctx context.Context, rights *models.Rights) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRights", ctx, rights)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRights indicates an expected call of CreateRights.
func (mr *MockIUserUsecaseMockRecorder) CreateRights(ctx, rights interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRights", reflect.TypeOf((*MockIUserUsecase)(nil).CreateRights), ctx, rights)
}

// GetRightsId mocks base method.
func (m *MockIUserUsecase) GetRightsId(ctx context.Context, name string) (*models.Rights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRightsId", ctx, name)
	ret0, _ := ret[0].(*models.Rights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRightsId indicates an expected call of GetRightsId.
func (mr *MockIUserUsecaseMockRecorder) GetRightsId(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRightsId", reflect.TypeOf((*MockIUserUsecase)(nil).GetRightsId), ctx, name)
}

// ListRights mocks base method.
func (m *MockIUserUsecase) ListRights(ctx context.Context) ([]models.Rights, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRights", ctx)
	ret0, _ := ret[0].([]models.Rights)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRights indicates an expected call of ListRights.
func (mr *MockIUserUsecaseMockRecorder) ListRights(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRights", reflect.TypeOf((*MockIUserUsecase)(nil).ListRights), ctx)
}

// UpdateUserData mocks base method.
func (m *MockIUserUsecase) UpdateUserData(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockIUserUsecaseMockRecorder) UpdateUserData(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockIUserUsecase)(nil).UpdateUserData), ctx, user)
}

// UpdateUserRole mocks base method.
func (m *MockIUserUsecase) UpdateUserRole(ctx context.Context, roleId uuid.UUID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, roleId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockIUserUsecaseMockRecorder) UpdateUserRole(ctx, roleId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockIUserUsecase)(nil).UpdateUserRole), ctx, roleId, email)
}

// UserByEmail mocks base method.
func (m *MockIUserUsecase) UserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail.
func (mr *MockIUserUsecaseMockRecorder) UserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockIUserUsecase)(nil).UserByEmail), ctx, email)
}
