/*
 * Backend for Online Shop
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package delivery

import (
	"OnlineShopBackend/internal/handlers"
	"net/http"

	"github.com/gin-gonic/gin"
)

// CreateItem - create a new item
func (d *Delivery) CreateItem(c *gin.Context) {
	ctx := c.Request.Context()
	var json handlers.Item
	if err := c.ShouldBindJSON(&json); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	id, err := d.h.CreateItem(ctx, json)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	c.JSON(http.StatusOK, gin.H{"success": id.String()})
}

// GetItem - returns item on id
func (d *Delivery) GetItem(c *gin.Context) {
	id := c.Param("itemID")
	ctx := c.Request.Context()
	item, err := d.h.GetItem(ctx, id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	c.JSON(http.StatusOK, item)
}

// UpdateItem - update an item
func (d *Delivery) UpdateItem(c *gin.Context) {
	ctx := c.Request.Context()
	var json handlers.Item
	if err := c.ShouldBindJSON(&json); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	err := d.h.UpdateItem(ctx, json)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	c.JSON(http.StatusOK, gin.H{})
}

// UploadFile - upload an image
func(d *Delivery) UploadFile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ItemsList - returns list of all items
func (d *Delivery) ItemsList(c *gin.Context) {
	list, err := d.h.ItemsList(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	for _, item := range list {
		c.JSON(http.StatusOK, item)
	}
}

// SearchLine - returns list of items with parameters
func (d *Delivery) SearchLine(c *gin.Context) {
	list, err := d.h.ItemsList(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	for _, item := range list {
		c.JSON(http.StatusOK, item)
	}
}
