openapi: 3.0.3
info:
  title: Backend for Online Shop
  version: 1.0.0
servers:
- url: /
security:
- OAuthAdmin:
  - item
tags:
- name: User
- name: Item
- name: Admin
paths:
  /items:
    get:
      description: "List of items with filters: lower and highest price and a category"
      operationId: ItemsList
      parameters:
      - description: Lower price limit
        explode: true
        in: query
        name: price_min
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Highest price limit
        explode: true
        in: query
        name: price_max
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: sort by special category
        explode: true
        in: query
        name: category
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid price range
      summary: List of Items with filters
      tags:
      - Item
    post:
      operationId: CreateItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: ""
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: successful operation
        "405":
          description: invalid output
      security:
      - OAuthAdmin:
        - item
      summary: Create a new item
      tags:
      - Admin
  /search/{searchRequest}:
    get:
      description: Find an item in the search line
      operationId: searchLine
      parameters:
      - explode: false
        in: path
        name: searchRequest
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: successful
        "404":
          description: not found
      tags:
      - Item
  /items/{itemID}:
    get:
      description: Find an item by ID
      operationId: GetItem
      parameters:
      - description: ID
        explode: false
        in: path
        name: itemID
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: successful operation
        "400":
          content: {}
          description: Invalid ID
      security:
      - OAuthAdmin:
        - item
      tags:
      - Admin
    put:
      operationId: UpdateItem
      parameters:
      - description: item by id which needs to be updated
        explode: false
        in: path
        name: itemID
        required: false
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: ""
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
          description: success
        "400":
          content: {}
          description: Bad request
      security:
      - OAuthAdmin:
        - item
      summary: Update an item
      tags:
      - Admin
  /items/{itemID}/upload:
    post:
      operationId: uploadFile
      requestBody:
        content:
          image/jpeg:
            schema:
              format: binary
              type: string
          image/png:
            schema:
              format: binary
              type: string
        description: ""
      responses:
        "201":
          content:
            text/plain:
              schema:
                type: string
          description: ""
      security:
      - OAuthAdmin:
        - item
      summary: upload an image
      tags:
      - Admin
  /categories/{category}:
    post:
      description: create a new category
      operationId: createCategory
      parameters:
      - description: category
        explode: false
        in: path
        name: category
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
      security:
      - OAuthAdmin:
        - item
      tags:
      - Admin
  /items/categories/{category}:
    get:
      operationId: getCategoryList
      parameters:
      - description: category
        explode: false
        in: path
        name: category
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: successful operation
        "400":
          content: {}
          description: Invalid ID
      summary: get a specific category
      tags:
      - Item
  /cart/{userID}:
    get:
      operationId: getCart
      parameters:
      - description: ""
        explode: false
        in: path
        name: userID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: successful operation
        "400":
          content: {}
          description: Id not found
      summary: get user cart
      tags:
      - Item
  /user/create:
    post:
      description: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Expires-After:
              description: UTC
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          content: {}
          description: Invalid login/password
      tags:
      - User
  /user/login:
    post:
      description: Login
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Expires-After:
              description: UTC
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          content: {}
          description: Invalid login/password
      tags:
      - User
  /user/logout:
    post:
      description: Logout
      operationId: logoutUser
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Expires-After:
              description: UTC
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          content: {}
          description: Invalid login/password
      tags:
      - User
components:
  schemas:
    Item:
      example:
        image: image
        price: 0
        description: description
        title: title
        category: category
      properties:
        title:
          type: string
        description:
          type: string
        price:
          format: float64
          type: integer
        category:
          type: string
        image:
          type: string
      type: object
    User:
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/User_address'
      type: object
    Cart:
      example:
        date: date
        userID: 0
        products: ""
      properties:
        userID:
          format: int64
          type: integer
        date:
          type: string
        products:
          properties:
            item:
              format: int64
              type: integer
            qty:
              format: int64
              type: integer
          type: array
      type: object
    createUser_request:
      properties:
        login:
          type: string
        password:
          type: string
      required:
      - login
      - password
      type: object
    User_address:
      properties:
        zipcode:
          format: int64
          type: integer
        country:
          type: string
        city:
          type: string
        street:
          type: string
      type: object
  securitySchemes:
    OAuthAdmin:
      description: This API uses OAuth 2
      flows:
        implicit:
          authorizationUrl: "https://someurl.com"
          scopes:
            item: create and change an item
          # tokenUrl: ' '
      type: oauth2
